let fs = require("fs");
const { ButtonInteraction, CommandInteraction, EmbedBuilder, ModalSubmitInteraction, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, User, ChannelType, ButtonBuilder, ButtonStyle, TextChannel, ThreadChannel, Attachment } = require("discord.js");
const { sql, reward, gacha_5, gacha_10 } = require(".");
const { errorReply, successReply } = require("./handlers/reply");
const client = require(".");
const EditJsonFile = require("edit-json-file");
const { gachaBox1, gachaBox5, gachaBox10 } = require("./canvas");

/**
 * @param {ButtonInteraction | CommandInteraction} interaction 
 * @param {User} user
 */


function checkMoney(interaction, user) {
    sql.get(`SELECT * FROM members WHERE member_id = '${user.id}'`, (err, res) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        } else {
            let embeds = new EmbedBuilder()
                .setAuthor({
                    name: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á | ${user.username}`,
                    iconURL: user.displayAvatarURL() ?? null
                }).setColor("#ffc496")

            if (res) {
                /**
                 * @type {number}
                 */
                let money = res.money
                /**
                 * @type {number}
                 */
                let total = res.total
                embeds.setFields(
                    {
                        name: "üíµ Point ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                        value: `${money.toFixed(0)} Point`,
                        inline: true
                    }, {
                    name: "üí≥ ‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                    value: `${total.toFixed(0)} Point`,
                    inline: true
                }
                )
            } else {

                embeds.setFields(
                    {
                        name: "üíµ Point ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                        value: `0 Point`,
                        inline: true
                    }, {
                    name: "üí≥ ‡∏¢‡∏≠‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                    value: `0 Point`,
                    inline: true
                }
                )
            }

            interaction.reply({
                embeds: [embeds],
                ephemeral: true
            }).catch(() => {
                errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            })
        }
    })
}

/**
 * @param {CommandInteraction} interaction 
 * @param {string} member_id 
 * @param {number} amount 
 */
function setMoney(interaction, member_id, amount) {
    sql.get(`SELECT * FROM members WHERE member_id = '${member_id}'`, (err, res) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        } else {
            if (res) {
                sql.run(`UPDATE members SET money = ${amount} WHERE member_id = '${member_id}'`, (err) => {
                    if (err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    } else {
                        successReply(interaction, "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    }
                })
            } else {
                sql.run(`INSERT INTO members (member_id, money, total) VALUES ('${member_id}', ${amount}, 0)`, (err) => {
                    if (err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    } else {
                        successReply(interaction, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    }
                })
            }
        }
    })
}

function checkCoins(interaction, user) {
    sql.get(`SELECT * FROM members WHERE member_id = '${user.id}'`, (err, res) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        } else {
            let embeds = new EmbedBuilder()
                .setAuthor({
                    name: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á | ${user.username}`,
                    iconURL: user.displayAvatarURL() ?? null
                }).setColor("#ffc496")

            if (res) {
                /**
                 * @type {number}
                 */
                let coins = res.coins
                embeds.setFields(
                    {
                        name: "üíµ Coins ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                        value: `${coins.toFixed(0)} Coins`,
                        inline: true
                    }
                )
            } else {

                embeds.setFields(
                    {
                        name: "üíµ Coins ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
                        value: `0 Coins`,
                        inline: true
                    }
                )
            }

            interaction.reply({
                embeds: [embeds],
                ephemeral: true
            }).catch(() => {
                errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
            })
        }
    })
}

/**
 * @param {CommandInteraction} interaction 
 * @param {string} member_id 
 * @param {number} amount 
 */
function setCoins(interaction, member_id, amount) {
    sql.get(`SELECT * FROM members WHERE member_id = '${member_id}'`, (err, res) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        } else {
            if (res) {
                sql.run(`UPDATE members SET coins = ${amount} WHERE member_id = '${member_id}'`, (err) => {
                    if (err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    } else {
                        successReply(interaction, "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    }
                })
            } else {
                sql.run(`INSERT INTO members (member_id, coins, total) VALUES ('${member_id}', ${amount}, 0)`, (err) => {
                    if (err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    } else {
                        successReply(interaction, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                    }
                })
            }
        }
    })
}


/**
         * 
         * @param {ButtonInteraction} interaction 
         */
function updateItemModal(interaction) {
    let item_id = interaction.customId.split("_")[2];
    sql.get(`SELECT * FROM gacha_items WHERE id = ${item_id}`, (err, res) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            if (res) {
                let modal = new ModalBuilder()
                    .setTitle("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
                    .setCustomId(`update_item_${item_id}`)
                    .setComponents(
                        new ActionRowBuilder()
                            .setComponents(
                                new TextInputBuilder()
                                    .setCustomId("name")
                                    .setPlaceholder("‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
                                    .setValue(res.name)
                                    .setMinLength(1)
                                    .setStyle(TextInputStyle.Short)
                                    .setRequired(true)
                            ),

                        new ActionRowBuilder()
                            .setComponents(
                                new TextInputBuilder()
                                    .setCustomId("url")
                                    .setPlaceholder("‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
                                    .setValue(res.url)
                                    .setMinLength(1)
                                    .setStyle(TextInputStyle.Short)
                                    .setRequired(true)
                            ),

                        new ActionRowBuilder()
                            .setComponents(
                                new TextInputBuilder()
                                    .setCustomId("description")
                                    .setPlaceholder("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
                                    .setValue(res.description)
                                    .setMinLength(1)
                                    .setStyle(TextInputStyle.Paragraph)
                                    .setRequired(true)
                            ),

                        new ActionRowBuilder()
                            .setComponents(
                                new TextInputBuilder()
                                    .setCustomId("command")
                                    .setPlaceholder("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°")
                                    .setValue(res.command)
                                    .setMinLength(1)
                                    .setStyle(TextInputStyle.Paragraph)
                                    .setRequired(true)
                            )
                    )

                interaction.showModal(modal).catch(() => {
                    errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
                })
            } else {
                return errorReply(interaction, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
            }
        }
    })
}

/**
 * 
 * @param {ModalSubmitInteraction} interaction 
 */
function insertItemSql(interaction) {
    let name = interaction.fields.getTextInputValue("name");
    let url = interaction.fields.getTextInputValue("url");
    let description = interaction.fields.getTextInputValue("description");
    let command = interaction.fields.getTextInputValue("command");

    sql.run(`INSERT INTO items (name, url, description, command) VALUES ('${name}', '${url}', '${description}', '${command}')`, (err) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            sql.get(`SELECT * FROM items ORDER BY id DESC LIMIT 1`, (err, res) => {
                if (err) {
                    console.log(err)
                    return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                } else {
                    successReply(interaction, `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ${res.name} ID : ${res.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
                }
            });
        }
    })
}

/**
 * 
 * @param {ModalSubmitInteraction} interaction 
 */
function updateItemSql(interaction) {
    let item_id = interaction.customId.split("_")[2];
    let name = interaction.fields.getTextInputValue("name");
    let url = interaction.fields.getTextInputValue("url");
    let description = interaction.fields.getTextInputValue("description");
    let command = interaction.fields.getTextInputValue("command");

    sql.run(`UPDATE items SET name = '${name}', url = '${url}', description = '${description}', command = '${command}' WHERE id = ${item_id}`, (err) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            successReply(interaction, "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        }
    })
}

function deleteItemSql(interaction) {
    let item_id = interaction.customId.split("_")[2];
    sql.run(`DELETE FROM items WHERE id = ${item_id}`, (err) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            sql.run(`DELETE FROM gacha_items WHERE items-id = ${item_id}`, (err) => { })
            successReply(interaction, "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        }
    })
}

function deleteGachaSql(interaction) {
    let gacha_id = interaction.customId.split("_")[2];
    sql.run(`DELETE FROM gacha_box WHERE id = ${gacha_id}`, (err) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            successReply(interaction, "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
            sql.run(`DELETE FROM gacha_items WHERE gacha_box_id = ${gacha_id}`, (err) => { })
        }
    })
}

/**
 * 
 * @param {ModalSubmitInteraction} interaction 
 */
function createItemSql(interaction) {
    let name = interaction.fields.getTextInputValue("name");
    let url = interaction.fields.getTextInputValue("url");
    let description = interaction.fields.getTextInputValue("description");
    let command = interaction.fields.getTextInputValue("command");

    sql.run(`INSERT INTO items (name, url, description, command) VALUES ('${name}', '${url}', '${description}', '${command}')`, (err) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            sql.get(`SELECT * FROM items ORDER BY id DESC LIMIT 1`, (err, res) => {
                if (err) {
                    console.log(err)
                    return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                } else {
                    successReply(interaction, `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ${res.name} ID : ${res.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
                }
            });
        }
    })
}

/**
 * 
 * @param {ButtonInteraction} interaction 
 */
function confirmSlip(interaction) {
    let member_id = interaction.customId.split("_")[2];
    let amount = interaction.customId.split("_")[3];
    sql.get(`SELECT * FROM members WHERE member_id = '${member_id}'`, (err, res) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            if (res) {
                sql.run(`UPDATE members SET money = ${res.money + parseInt(amount)}, total = ${res.total + parseInt(amount)} WHERE member_id = '${member_id}'`, (err) => {
                    if (err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                    } else {
                        sendMessageToMember(member_id, amount);
                        successReply(interaction, "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
                        hideButton(interaction);
                    }
                })
            } else {
                sql.run(`INSERT INTO members (member_id, money, total) VALUES ('${member_id}', ${amount}, ${amount})`, (err) => {
                    if (err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                    } else {
                        sendMessageToMember(member_id, amount);
                        successReply(interaction, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
                        hideButton(interaction);
                    }
                })
            }
        }
    })
    /**
     * 
     * @param {ButtonInteraction} interaction 
     */
    function hideButton(interaction) {
        let newEmbeds = new EmbedBuilder(interaction.message.embeds[0]).setColor("#D7FFA9").setAuthor({
            name: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
        })
        interaction.message.edit({
            components: [],
            embeds: [newEmbeds]
        }).catch(() => { })
    }

    /**
     * @param {string} member_id
     * @param {number} amount
     */
    function sendMessageToMember(member_id, amount) {
        client.users.fetch(member_id).then(user => {
            if (user) {
                let embeds = new EmbedBuilder()
                    .setAuthor({
                        name: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°Point",
                        iconURL: user.avatarURL() ?? null
                    }).setColor("#D7FFA9")
                    .setDescription(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°Point‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏öPoint ${amount.toFixed(0)} Point ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`)
                    .setThumbnail(user.avatarURL() ?? null)
                user.send({
                    embeds: [embeds]
                }).catch((e) => {
                    console.log(e)
                })
            } else {

            }
        }).catch(() => { })
    }
}

/**
 * @param {ButtonInteraction} interaction 
 */
function cancelSlip(interaction) {
    let member_id = interaction.customId.split("_")[2];

    client.users.fetch(member_id).then(user => {
        if (user) {
            let embeds = new EmbedBuilder()
                .setAuthor({
                    name: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°Point",
                    iconURL: user.avatarURL() ?? null
                }).setColor("#FFA9A9")
                .setDescription(`‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°Point‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
                .setThumbnail(user.avatarURL() ?? null)
            user.send({
                embeds: [embeds]
            }).catch(() => { })
        }
    }).catch(() => { })

    let newEmbeds = new EmbedBuilder(interaction.message.embeds[0]).setColor("#FFA9A9").setAuthor({
        name: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
    })

    interaction.message.edit({
        components: [],
        embeds: [newEmbeds]
    }).catch(() => { })
}
/**
 * @param {ButtonInteraction} interaction 
 */
function marketStart(interaction) {
    /**
     * @type {TextChannel}
     */
    let channel = interaction.guild.channels.cache.get(interaction.channelId);
    channel.threads.create({
        name: `‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á ${interaction.user.username}`,
        invitable: true,
        type: ChannelType.PrivateThread
    }).catch((e) => {
        console.log(e)
        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
    }).then((channel) => {
        if (channel)
            channel.members.add(interaction.user).catch(() => {
                errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
            }).then(() => {
                let gacha_start = EditJsonFile(`./config/gacha_start.json`);
                let embeds_json = gacha_start.get();
                let embeds = new EmbedBuilder(embeds_json)
                if (embeds) {
                    let gachaBOx = new ActionRowBuilder()
                        .setComponents(
                            new ButtonBuilder()
                                .setCustomId("gacha_1")
                                .setLabel("‡∏™‡∏∏‡πà‡∏° 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üéÅ"),

                            new ButtonBuilder()
                                .setCustomId("gacha_5")
                                .setLabel("‡∏™‡∏∏‡πà‡∏° 5 ‡∏Å‡∏•‡πà‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üéÅ"),

                            new ButtonBuilder()
                                .setCustomId("gacha_10")
                                .setLabel("‡∏™‡∏∏‡πà‡∏° 10 ‡∏Å‡∏•‡πà‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üéÅ"),

                            new ButtonBuilder()
                                .setCustomId("member_check_data")
                                .setLabel("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üìä"),

                            new ButtonBuilder()
                                .setCustomId("get_reward")
                                .setLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Success)
                                .setEmoji("üéÅ"),
                        )
                    channel.send({
                        content: `<@${interaction.user.id}>`,
                        embeds: [embeds],
                        components: [gachaBOx]
                    }).catch((e) => {
                        console.log(e)
                        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
                    }).then(() => {
                        successReply(interaction, `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á ${channel.name}`)
                    })
                } else {
                    errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                }
            })
    })
}

/**
 * @param {ButtonInteraction} interaction 
 */
function coinsmarketStart(interaction) {
    /**
     * @type {TextChannel}
     */
    let channel = interaction.guild.channels.cache.get(interaction.channelId);
    channel.threads.create({
        name: `‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á ${interaction.user.username}`,
        invitable: true,
        type: ChannelType.PrivateThread
    }).catch((e) => {
        console.log(e)
        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
    }).then((channel) => {
        if (channel)
            channel.members.add(interaction.user).catch(() => {
                errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
            }).then(() => {
                let gacha_start = EditJsonFile(`./config/gacha_start.json`);
                let embeds_json = gacha_start.get();
                let embeds = new EmbedBuilder(embeds_json)
                if (embeds) {
                    let gachaBOx = new ActionRowBuilder()
                        .setComponents(
                            new ButtonBuilder()
                                .setCustomId("coins_gacha_1")
                                .setLabel("‡∏™‡∏∏‡πà‡∏° 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üéÅ"),

                            new ButtonBuilder()
                                .setCustomId("coins_gacha_5")
                                .setLabel("‡∏™‡∏∏‡πà‡∏° 5 ‡∏Å‡∏•‡πà‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üéÅ"),

                            new ButtonBuilder()
                                .setCustomId("coins_gacha_10")
                                .setLabel("‡∏™‡∏∏‡πà‡∏° 10 ‡∏Å‡∏•‡πà‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üéÅ"),

                            new ButtonBuilder()
                                .setCustomId("coins-member_check_data")
                                .setLabel("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                                .setStyle(ButtonStyle.Primary)
                                .setEmoji("üìä"),

                            new ButtonBuilder()
                                .setCustomId("get_reward")
                                .setLabel("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á")
                                .setStyle(ButtonStyle.Success)
                                .setEmoji("üéÅ"),
                        )
                    channel.send({
                        content: `<@${interaction.user.id}>`,
                        embeds: [embeds],
                        components: [gachaBOx]
                    }).catch((e) => {
                        console.log(e)
                        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
                    }).then(() => {
                        successReply(interaction, `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á ${channel.name}`)
                    })
                } else {
                    errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                }
            })
    })
}

/**
 * 
 * @param {ButtonInteraction} interaction 
 */
function gacha_1_random(interaction) {
    sql.get(`SELECT * FROM members WHERE member_id = '${interaction.member.id}'`, (err, member) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            if (member) {

                let gacha_set = {
                    gacha_1 : {
                        count : 1,
                        price : 10
                    },
                    gacha_5 : {
                        count : 5,
                        price : 50
                    },
                    gacha_10 : {
                        count : 10,
                        price : 100
                    }
                }

                let gachaset = gacha_set[interaction.customId]

                if (member.money >= gachaset.price) {
                    sql.run(`UPDATE members SET money = ${member.money - gachaset.price} WHERE member_id = '${interaction.member.id}'`, (err) => {
                        if (err) {
                            console.log(err)
                            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                        } else {
                            sql.all(`SELECT * FROM gacha_items WHERE gacha_box_id = 1`, (err, res) => {
                                if (err) return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á");
                                if (res.length <= 0) return errorReply(interaction, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ");
                                /**
                                 * @typedef {Object} items_all
                                 * @property {number} id
                                 * @property {number} gacha_box_id
                                 * @property {number} item_id
                                 * @property {number} rate
                                 */

                                /**
                                 * @type {Array<items_all>}
                                 */
                                let items_all = res;
                                const randomlySelectedItem = getRandomItemsWithRate(items_all, gachaset.count);
                                if (randomlySelectedItem) {
                                    randomlySelectedItem.forEach((item) => {
                                        sql.get(`SELECT * FROM items WHERE id = ${item.item_id}`, (err, res) => {
                                            if (err) {

                                            } else {
                                                if (res) {
                                                    if(gachaset.count == 1){
                                                        gachaBox1(res, interaction)
                                                        gachaSaveList(interaction, [res])
                                                    }else{
                                                        if(gachaset.count == 5){
                                                            var gacha = gacha_5.get(`${interaction.user.id}`);
                                                            if(!gacha){
                                                                gacha_5.set(`${interaction.user.id}`, [res])
                                                            }else{
                                                                gacha.push(res)
                                                                gacha_5.set(`${interaction.user.id}`, gacha)
                                                                if(gacha.length == gachaset.count){
                                                                    gachaBox5(gacha, interaction)
                                                                    gachaSaveList(interaction, gacha)
                                                                    gacha_5.delete(`${interaction.user.id}`)
                                                                }
                                                            }
                                                        }
                                                        if(gachaset.count == 10){
                                                            var gacha = gacha_10.get(`${interaction.user.id}`);
                                                            if(!gacha){
                                                                gacha_10.set(`${interaction.user.id}`, [res])
                                                            }else{
                                                                gacha.push(res)
                                                                gacha_10.set(`${interaction.user.id}`, gacha)
                                                                if(gacha.length == gachaset.count){
                                                                    gachaBox10(gacha, interaction)
                                                                    gachaSaveList(interaction, gacha)
                                                                    gacha_10.delete(`${interaction.user.id}`)
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        })
                                    })
                                } else {
                                    errorReply(interaction, "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏î‡πÜ")
                                }
                            })
                        }
                    })
                } else {
                    return errorReply(interaction, "Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°Point");
                }
            } else {
                return errorReply(interaction, "Point ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°Point");
            }
        }
    })
}

/**
 * 
 * @param {ButtonInteraction} interaction 
 */
function gacha_2_random(interaction) {
    sql.get(`SELECT * FROM members WHERE member_id = '${interaction.member.id}'`, (err, member) => {
        if (err) {
            console.log(err)
            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } else {
            if (member) {
                let gacha_set = {
                    coins_gacha_1 : {
                        count : 1,
                        price : 10
                    },
                    coins_gacha_5 : {
                        count : 5,
                        price : 50
                    },
                    coins_gacha_10 : {
                        count : 10,
                        price : 100
                    }
                }

                let gachaset = gacha_set[interaction.customId]

                if (member.coins >= gachaset.price) {
                    sql.run(`UPDATE members SET coins = ${member.money - gachaset.price} WHERE member_id = '${interaction.member.id}'`, (err) => {
                        if (err) {
                            console.log(err)
                            return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                        } else {
                            sql.all(`SELECT * FROM gacha_items WHERE gacha_box_id = 2`, (err, res) => {
                                if (err) return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á");
                                if (res.length <= 0) return errorReply(interaction, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ");
                                /**
                                 * @typedef {Object} items_all
                                 * @property {number} id
                                 * @property {number} gacha_box_id
                                 * @property {number} item_id
                                 * @property {number} rate
                                 */

                                /**
                                 * @type {Array<items_all>}
                                 */
                                let items_all = res;
                                const randomlySelectedItem = getRandomItemsWithRate(items_all, gachaset.count);
                                if (randomlySelectedItem) {
                                    randomlySelectedItem.forEach((item) => {
                                        sql.get(`SELECT * FROM items WHERE id = ${item.item_id}`, (err, res) => {
                                            if (err) {
                                                console.log(err);
                                                errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á");
                                            } else {
                                                if (res) {
                                                    if(gachaset.count == 1){
                                                        gachaBox1(res, interaction)
                                                        gachaSaveList(interaction, [res])
                                                    }else{
                                                        if(gachaset.count == 5){
                                                            var gacha = gacha_5.get(`${interaction.user.id}`);
                                                            if(!gacha){
                                                                gacha_5.set(`${interaction.user.id}`, [res])
                                                            }else{
                                                                gacha.push(res)
                                                                gacha_5.set(`${interaction.user.id}`, gacha)
                                                                if(gacha.length == gachaset.count){
                                                                    gachaBox5(gacha, interaction)
                                                                    gachaSaveList(interaction, gacha)
                                                                    gacha_5.delete(`${interaction.user.id}`)
                                                                }
                                                            }
                                                        }
                                                        if(gachaset.count == 10){
                                                            var gacha = gacha_10.get(`${interaction.user.id}`);
                                                            if(!gacha){
                                                                gacha_10.set(`${interaction.user.id}`, [res])
                                                            }else{
                                                                gacha.push(res)
                                                                gacha_10.set(`${interaction.user.id}`, gacha)
                                                                if(gacha.length == gachaset.count){
                                                                    gachaBox10(gacha, interaction)
                                                                    gachaSaveList(interaction, gacha)
                                                                    gacha_10.delete(`${interaction.user.id}`)
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        })
                                    })
                                } else {
                                    errorReply(interaction, "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏î‡πÜ")
                                }
                            })
                        }
                    })
                } else {
                    return errorReply(interaction, "Coins ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
                }
            } else {
                return errorReply(interaction, "Coins ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠");
            }
        }
    })
}

function getRandomItemWithRate(items_all) {
    const totalRate = items_all.reduce((total, item) => total + item.rate, 0);
    const randomNum = Math.random() * totalRate;
    let runningTotal = 0;
    for (const item of items_all) {
        runningTotal += item.rate;
        if (randomNum <= runningTotal) {
            return item;
        }
    }
    return null;
}

function getRandomItemsWithRate(items_all, numItems) {
    const randomItems = [];
    for (let i = 0; i < numItems; i++) {
        const randomItem = getRandomItemWithRate(items_all);
        randomItems.push(randomItem);
    }
    return randomItems;
}

/**
 * @typedef {Object} items_all
 * @property {number} id
 * @property {number} gacha_box_id
 * @property {number} item_id
 * @property {number} rate
 */

/**
 * 
 * @param {ButtonInteraction} interaction 
 * @param {Array<items_all>} items 
 */
function gachaSaveList(interaction, items) {
    let timeOut = 100;
    items.forEach(items => {
        setTimeout(() => {
            sql.get(`SELECT * FROM reward WHERE member_id = '${interaction.member.id}'`, (err, res) => {
                if (err) return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                if (res) {
                    sql.run(`UPDATE reward SET items_list = '${res.items_list}, ${items.id}' WHERE member_id = '${interaction.member.id}'`, (err) => {
                        if (err) return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                    })
                } else {
                    sql.run(`INSERT INTO reward (member_id, items_list) VALUES ('${interaction.member.id}', '${items.id}')`, (err) => {
                        if (err) return errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                    })
                }
            })
        }, timeOut);
        timeOut += 100;
    })
}

/**
 * 
 * @param {ButtonInteraction} interaction 
 */
function getReward(interaction) {
    /**
     * @type {ThreadChannel}
     */
    let channel = interaction.channel;
    channel.members.remove(interaction.user.id).catch((e) => {
        console.log(e)
        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
    }).then(() => {
        sql.get(`SELECT * FROM reward WHERE member_id = '${interaction.member.id}'`, async (err, res) => {
            if (err) {
                console.log(err)
                errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            } else {
                if (res) {
                    if (!res.items_list) {
                        channel.delete().catch(() => {
                            errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
                        })
                    } else {
                        let text = "";
                        /**
                         * @type {Array<string>}
                         */
                        let rewards = res.items_list.split(",");
                        for (let i = 0; i < rewards.length; i++) {
                            let item = await getItems(rewards[i]);
                            if (item) {
                                text += `${item.command}\n`
                            }
                        }

                        let path = `./gacha_list/${interaction.member.id}.txt`;
                        fs.writeFile(path, text, (err) => {
                            if (err) {
                                console.log(err)
                                errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡∏ì‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                            } else {
                                let file = path;
                                channel.send({
                                    files: [file]
                                }).then(() => {
                                    interaction.deferUpdate().catch(() => { })
                                    fs.unlinkSync(file);
                                    sql.run(`DELETE FROM reward WHERE member_id = '${interaction.member.id}'`, (err) => { })
                                }).catch(() => {
                                    interaction.deferUpdate().catch(() => { })
                                })
                            }
                        })
                    }
                } else {
                    channel.delete().catch(() => {
                        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
                    })
                }
            }
        })
    })
}



/**
 * @typedef {Object} RewardItem
 * @property {number} id
 * @property {string} name
 * @property {string} url
 * @property {string} description
 * @property {string} command
 */

/**
 * 
 * @param {String} item_id 
 * @returns  {Promise<RewardItem>}
 */
function getItems(item_id) {
    return new Promise((resolve, reject) => {
        sql.get(`SELECT * FROM items WHERE id = ${item_id}`, (err, res) => {
            if (err) reject(err);
            if (res) resolve(res);
        })
    })
}

/**
             * 
             * @param {ModalSubmitInteraction} interaction 
             */
function subModal(interaction) {
    let vip_type = {
        vip_1: {
            name: "VIP Silver",
            price: 69,
            date: 3,
            role_id: "1155059226931114054"
        },
        vip_2: {
            name: "VIP Gold",
            price: 150,
            date: 15,
            role_id: "1155059263866155008"
        },
        vip_3: {
            name: "VIP Platinum",
            price: 300,
            date: 30,
            role_id: "1155059289992478771"
        }
    }

    let stream_id = interaction.fields.getTextInputValue("strem_id");
    let role = interaction.guild.roles.cache.get(vip_type[interaction.customId].role_id);
    let price = vip_type[interaction.customId].price;
    let date = vip_type[interaction.customId].date;
    sql.get(`SELECT * FROM vip WHERE member_id = '${interaction.user.id}'`, (err, row) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        } else {
            if (row) {
                if (row.time_out > Date.now() / 1000) {
                    errorReply(interaction, "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ VIP ‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å")
                } else {
                    nextStep(true)
                }
            } else {
                nextStep(false)
            }
        }
        /**
         * 
         * @param {Boolean} check 
         */
        function nextStep(check) {
            sql.get(`SELECT * FROM members WHERE member_id = '${interaction.user.id}'`, (err, row) => {
                if (err) {
                    console.log(err)
                    errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                } else {
                    if (row) {
                        if (row.money < price) {
                            errorReply(interaction, "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏û‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô")
                        } else {
                            sql.run(`UPDATE members SET money = money - ${price} WHERE member_id = '${interaction.user.id}'`, (err) => {
                                if (err) {
                                    console.log(err)
                                    errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                                } else {
                                    interaction.member.roles.add(role).then(() => {
                                        let newTime = (Date.now() / 1000 + (date * 86400)).toFixed(0)
                                        let next_alert = (Date.now() / 1000 + ((date - 1) * 86400)).toFixed(0)
                                        if (check == true) {
                                            sql.run(`UPDATE vip SET time_out = ${newTime}, role_id = '${role.id}', next_alert = ${next_alert} WHERE member_id = '${interaction.user.id}'`, (err) => {
                                                if (err) {
                                                    console.log(err)
                                                    errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                                                } else {
                                                    sendMember(newTime)
                                                    sendAdminChannel(newTime)
                                                    successReply(interaction, `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${vip_type[interaction.customId].name} ‡πÅ‡∏•‡πâ‡∏ß`)
                                                }
                                            })
                                        } else {
                                            sql.run(`INSERT INTO vip (member_id, role_id, time_out, next_alert) VALUES ('${interaction.user.id}', '${role.id}', ${newTime}, ${next_alert})`, (err) => {
                                                if (err) {
                                                    console.log(err)
                                                    errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                                                } else {
                                                    sendMember(newTime)
                                                    sendAdminChannel(newTime)
                                                    successReply(interaction, `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${vip_type[interaction.customId].name} ‡πÅ‡∏•‡πâ‡∏ß`)
                                                }
                                            })
                                        }

                                        function sendMember(newTime) {
                                            interaction.user.send({
                                                content: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏® ${vip_type[interaction.customId].name} | ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ <t:${newTime}:R> ‡∏ß‡∏±‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${price} ‡∏û‡πâ‡∏≠‡∏¢`,
                                            }).catch(() => { })
                                        }

                                        function sendAdminChannel(newTime) {
                                            let channel = interaction.guild.channels.cache.get("1155074915624554517");
                                            if (channel) {
                                                channel.send({
                                                    content: `‡∏Ñ‡∏∏‡∏ì ${interaction.user.tag} ‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏° : ${stream_id} \n‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏® ${vip_type[interaction.customId].name} | ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ <t:${newTime}:R> ‡∏ß‡∏±‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${price} ‡∏û‡πâ‡∏≠‡∏¢`,
                                                }).catch(() => { })
                                            }
                                        }
                                    }).catch((e) => {
                                        console.log(e)
                                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                                        sql.run(`UPDATE members SET money = money + ${price} WHERE member_id = '${interaction.user.id}'`, (err) => {
                                            if (err) console.log(err)
                                        })
                                    })
                                }
                            })
                        }
                    } else {
                        errorReply(interaction, "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏û‡πâ‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô")
                    }
                }
            })
        }
    })
}
/**
            * 
            * @param {ButtonInteraction} interaction 
            */
function sub(interaction) {
    let vip_type = {
        vip_1: {
            name: "VIP Silver",
            price: 69,
            date: 3,
            role_id: "1155059226931114054"
        },
        vip_2: {
            name: "VIP Gold",
            price: 150,
            date: 15,
            role_id: "1155059263866155008"
        },
        vip_3: {
            name: "VIP Platinum",
            price: 300,
            date: 30,
            role_id: "1155059289992478771"
        }
    }

    let modal = new ModalBuilder()
        .setComponents(
            new ActionRowBuilder()
                .setComponents(
                    new TextInputBuilder()
                        .setCustomId("strem_id")
                        .setPlaceholder("‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏°")
                        .setRequired(true)
                        .setLabel("‡πÑ‡∏≠‡∏î‡∏µ‡∏™‡∏ï‡∏£‡∏µ‡∏°")
                        .setMinLength(3)
                        .setMaxLength(50)
                        .setStyle(TextInputStyle.Short)
                )
        ).setTitle(`${vip_type[interaction.customId].name}`)
        .setCustomId(`${interaction.customId}`)

    interaction.showModal(modal).then(() => { }).catch((e) => {
        console.log(e)
        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ú‡πà‡∏≤‡∏ô console")
    })
}
/**
 * 
 * @param {ButtonInteraction} interaction 
 */
function checkVIP(interaction) {
    sql.get(`SELECT * FROM vip WHERE member_id = '${interaction.user.id}'`, (err, row) => {
        if (err) {
            console.log(err)
            errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        } else {
            if (row) {
                let embeds = new EmbedBuilder()
                    .setAuthor({
                        name: "‡∏£‡∏∞‡∏ö‡∏ö VIP",
                        iconURL: interaction.user.avatarURL() ?? null
                    }).setFields(
                        {
                            name: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó",
                            value: `<@&${row.role_id}>`,
                            inline: true
                        }, {
                        name: "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
                        value: `<t:${row.time_out}:R>`,
                        inline: true
                    }
                    ).setThumbnail(interaction.user.avatarURL() ?? null)

                interaction.reply({
                    embeds: [embeds],
                    ephemeral: true
                }).then(() => { }).catch(() => {
                    errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
                })
            } else {
                successReply(interaction, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ VIP")
            }
        }
    })
}

module.exports = {
    checkMoney,
    setMoney,
    updateItemModal,
    insertItemSql,
    updateItemSql,
    deleteItemSql,
    deleteGachaSql,
    createItemSql,
    confirmSlip,
    cancelSlip,
    marketStart,
    gacha_1_random,
    getReward,
    gacha_2_random,
    subModal,
    sub,
    checkVIP,
    checkCoins,
    setCoins,
    coinsmarketStart
}
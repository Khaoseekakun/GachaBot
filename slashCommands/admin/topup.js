const { ApplicationCommandType, ApplicationCommandOptionType, CommandInteraction, Client, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, TextChannel } = require("discord.js");
const { errorReply, successReply } = require("../../handlers/reply");
const { sql } = require("../..");

module.exports = {
    name : "topup",
    description : "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏¥‡∏°Point",
    type : ApplicationCommandType.ChatInput,
    options: [
        {
            name : "slip",
            description: "‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ",
            type : ApplicationCommandOptionType.Attachment,
            required : true
        },{
            name : "amount",
            description: "‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ",
            type : ApplicationCommandOptionType.Integer,
            required : true
        }
    ],
    /**
     * @param {Client} client
     * @param {CommandInteraction} interaction
     */
    run: async(client, interaction) => {
        let files = interaction.options.get("slip").attachment;
        let amount = interaction.options.get("amount").value;
        if(amount <= 0) return errorReply(interaction, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ôPoint‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
        if(files){
            if(files.url.endsWith(".png") || files.url.endsWith(".jpg") || files.url.endsWith(".jpeg")){
                sql.get(`SELECT * FROM channel_slip WHERE guild_id = '${interaction.guildId}'`, (err, row) => {
                    if(err) {
                        console.log(err)
                        errorReply(interaction, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    }else{
                        if(row){
                            client.channels.fetch(row.channel_id).then(/** @param {TextChannel} channel */channel => {
                                if(channel){
                                    let embeds = new EmbedBuilder()
                                    .setAuthor({
                                        name : interaction.user.username,
                                        iconURL : interaction.user.avatarURL() ?? null
                                    }).setImage(files.url)
                                    .setColor("#FFE9A9")
                                    .setDescription(`üí≥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ôPoint ${amount} Point`)
                                    .setThumbnail(interaction.user.avatarURL() ?? null)

                                    let actionRow = new ActionRowBuilder()
                                    .setComponents(
                                        new ButtonBuilder()
                                        .setCustomId(`confirm_topup_${interaction.user.id}_${amount}`)
                                        .setLabel("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°Point")
                                        .setStyle(ButtonStyle.Success)
                                        .setEmoji("‚úÖ"),

                                        new ButtonBuilder()
                                        .setCustomId(`cancel_topup_${interaction.user.id}`)
                                        .setLabel("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°Point")
                                        .setStyle(ButtonStyle.Danger)
                                        .setEmoji("‚ùå")
                                    )
                                    channel.send({
                                        embeds : [embeds],
                                        components : [actionRow]
                                    }).catch(() => {
                                        errorReply(interaction, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
                                    }).then(() => {
                                        successReply(interaction, "‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                                    })
                                }else{
                                    errorReply(interaction, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                                }
                            }).catch(() => {
                                errorReply(interaction, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                            })
                        }else{
                            errorReply(interaction, "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
                        }
                    }
                })
            }else{
                errorReply(interaction, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            }
        }
    }
}